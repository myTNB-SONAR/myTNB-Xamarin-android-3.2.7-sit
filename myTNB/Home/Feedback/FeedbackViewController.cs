using System; using UIKit; using myTNB.Dashboard.DashboardComponents; using CoreGraphics; using myTNB.Home.Feedback; using System.Threading.Tasks;
using myTNB.Model;
using System.Collections.Generic;

namespace myTNB {     public partial class FeedbackViewController : UIViewController     {         public FeedbackViewController(IntPtr handle) : base(handle)         {         }          SubmittedFeedbackResponseModel _submittedFeedback = new SubmittedFeedbackResponseModel();         string _email = string.Empty;          public bool isFromPreLogin;          public override void ViewDidLoad()         {             base.ViewDidLoad();              if (isFromPreLogin == true)
            {                 feedbackTableView.Frame = new CGRect(0, 0, View.Frame.Width, View.Frame.Height - (114 - 64));                 AddBackButton();                 this.Title = "Feedback";
                //View.BackgroundColor = myTNBColor.LightGray();
            }
            else
            {                 feedbackTableView.Frame = new CGRect(0, DeviceHelper.IsIphoneX() ? 88 : 64, View.Frame.Width, View.Frame.Height - (114));                 SetNavigationBar();             }             _email = DataManager.DataManager.SharedInstance.IsPreloginFeedback                                 ? string.Empty                                 : DataManager.DataManager.SharedInstance.UserEntity[0].email;         }          public override void ViewWillAppear(bool animated)         {             base.ViewWillAppear(animated);             NetworkUtility.CheckConnectivity().ContinueWith(networkTask =>             {                 InvokeOnMainThread(() =>                 {                     if (NetworkUtility.isReachable)                     {                         ActivityIndicator.Show();                         GetSubmittedFeedbackList().ContinueWith(task =>                         {                             InvokeOnMainThread(() =>                             {                                 if (_submittedFeedback == null || _submittedFeedback.d == null
                                   || _submittedFeedback.d.data == null)
                                {                                     _submittedFeedback = new SubmittedFeedbackResponseModel();                                     _submittedFeedback.d = new SubmittedFeedbackModel();                                     _submittedFeedback.d.data = new List<SubmittedFeedbackDataModel>();                                 }                                 var viewHeaderHeight = (View.Frame.Width * 126) / 320;                                 UIView viewHeader = new UIView(new CGRect(0, 0, View.Frame.Width, viewHeaderHeight));                                 UIImageView imgViewBackgroundPhoto = new UIImageView(viewHeader.Frame);                                 imgViewBackgroundPhoto.Image = UIImage.FromBundle("Feedback-Header");                                 viewHeader.AddSubview(imgViewBackgroundPhoto);                                 feedbackTableView.TableHeaderView = viewHeader;                                  feedbackTableView.BackgroundColor = myTNBColor.LightGrayBG();
                                feedbackTableView.RowHeight = 80f;                                 feedbackTableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;                                 feedbackTableView.Source = new FeedbackDataSource(this, _submittedFeedback.d.data, isFromPreLogin);                                 feedbackTableView.ReloadData();                                 feedbackTableView.TableFooterView = new UIView();                                 feedbackTableView.ScrollEnabled = feedbackTableView.ContentSize.Height > feedbackTableView.Frame.Height;                                 ActivityIndicator.Hide();                             });                         });                     }                     else                     {                         Console.WriteLine("No Network");                         var alert = UIAlertController.Create("No Data Connection", "Please check your data connection and try again.", UIAlertControllerStyle.Alert);                         alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, null));                         PresentViewController(alert, animated: true, completionHandler: null);                     }                 });             });          }          internal void AddBackButton()         {             UIImage backImg = UIImage.FromBundle("Back-White");             UIBarButtonItem btnBack = new UIBarButtonItem(backImg, UIBarButtonItemStyle.Done, (sender, e) =>             {                 this.DismissViewController(true, null);             });             this.NavigationItem.LeftBarButtonItem = btnBack;         }          internal void SetNavigationBar()         {             GradientViewComponent gradientViewComponent = new GradientViewComponent(View, true, 64, true); ;             UIView headerView = gradientViewComponent.GetUI();             TitleBarComponent titleBarComponent = new TitleBarComponent(headerView);             UIView titleBarView = titleBarComponent.GetUI();             titleBarComponent.SetTitle("Feedback");             titleBarComponent.SetNotificationVisibility(true);             headerView.AddSubview(titleBarView);             View.AddSubview(headerView);         }          internal void DisplaySubmittedFeedback()
        {             if (_submittedFeedback != null && _submittedFeedback.d != null                 && _submittedFeedback.d.data != null)
            {
                UIStoryboard storyBoard = UIStoryboard.FromName("Feedback", null);
                SubmittedFeedbackViewController submittedFeedbackVC =
                    storyBoard.InstantiateViewController("SubmittedFeedbackViewController") as SubmittedFeedbackViewController;
                submittedFeedbackVC.SubmittedFeedback = _submittedFeedback;
                var navController = new UINavigationController(submittedFeedbackVC);
                PresentViewController(navController, true, null);             }         }          Task GetSubmittedFeedbackList()         {             return Task.Factory.StartNew(() =>             {                 ServiceManager serviceManager = new ServiceManager();                 object requestParameter = new                 {                     apiKeyID = TNBGlobal.API_KEY_ID,                     email = _email,                     deviceId = DataManager.DataManager.SharedInstance.UDID                 };                 _submittedFeedback = serviceManager.GetSubmittedFeedbackList("GetSubmittedFeedbackList", requestParameter);             });         }     } }